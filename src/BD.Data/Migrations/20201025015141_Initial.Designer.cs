// <auto-generated />
using System;
using BD.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BD.Data.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20201025015141_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BD.Business.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(150)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "0ce10c37-eba8-462c-a45f-5d3c5f39c1c8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("BD.Business.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime");

                    b.Property<int>("DisabledBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4109642f-fa45-424d-9f06-cd9ab737dafc",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIYWDjDBjBb1/HwtsQSxPiyJuFK/ZMT3j5CjnGRKAXRVYZ0Jx7Zei5tlp7eyfkWOGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2213a047-a3f6-4c91-bab0-6642e2693b9f",
                            TwoFactorEnabled = false,
                            UpdatedBy = 0,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("BD.Business.Models.CashFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DisabledBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MovementType")
                        .HasColumnType("int");

                    b.Property<int?>("ReserveId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(14,2)");

                    b.HasKey("Id");

                    b.HasIndex("ReserveId");

                    b.ToTable("CashFlows");
                });

            modelBuilder.Entity("BD.Business.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DisabledBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(180)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(14,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("BD.Business.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DisabledBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Type", "Value")
                        .IsUnique();

                    b.ToTable("permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(1484),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(1492),
                            Name = "Listar Usuários",
                            Type = "User",
                            UpdatedBy = 0,
                            Value = "All"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2074),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2080),
                            Name = "Visualizar Usuário",
                            Type = "User",
                            UpdatedBy = 0,
                            Value = "Get"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2091),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2092),
                            Name = "Adicionar Usuário",
                            Type = "User",
                            UpdatedBy = 0,
                            Value = "Add"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2095),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2096),
                            Name = "Alterar Usuário",
                            Type = "User",
                            UpdatedBy = 0,
                            Value = "Edit"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2098),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2099),
                            Name = "Desativar Usuário",
                            Type = "User",
                            UpdatedBy = 0,
                            Value = "Disable"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2104),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2105),
                            Name = "Reativar Usuário",
                            Type = "User",
                            UpdatedBy = 0,
                            Value = "Reactive"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2107),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2108),
                            Name = "Trocar Senha",
                            Type = "User",
                            UpdatedBy = 0,
                            Value = "ChangePassword"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2110),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2111),
                            Name = "Trocar Senha de outro Usuário",
                            Type = "User",
                            UpdatedBy = 0,
                            Value = "ChangeUserPassword"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2113),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2115),
                            Name = "Listar Funções",
                            Type = "Role",
                            UpdatedBy = 0,
                            Value = "All"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2118),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2119),
                            Name = "Visualizar Função",
                            Type = "Role",
                            UpdatedBy = 0,
                            Value = "Get"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2121),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2122),
                            Name = "Adicionar Função",
                            Type = "Role",
                            UpdatedBy = 0,
                            Value = "Add"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2124),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2125),
                            Name = "Alterar Função",
                            Type = "Role",
                            UpdatedBy = 0,
                            Value = "Edit"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2127),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2128),
                            Name = "Apagar Função",
                            Type = "Role",
                            UpdatedBy = 0,
                            Value = "Delete"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2130),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2131),
                            Name = "Adicionar Permissão a Função",
                            Type = "Role",
                            UpdatedBy = 0,
                            Value = "AddClaim"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2133),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2134),
                            Name = "Remover Permissão da Função",
                            Type = "Role",
                            UpdatedBy = 0,
                            Value = "DeleteClaim"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2136),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2137),
                            Name = "Listar Reservas",
                            Type = "Reserve",
                            UpdatedBy = 0,
                            Value = "All"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2140),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2141),
                            Name = "Visualizar Reserva",
                            Type = "Reserve",
                            UpdatedBy = 0,
                            Value = "Get"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2144),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2145),
                            Name = "Adicionar Reserva",
                            Type = "Reserve",
                            UpdatedBy = 0,
                            Value = "Add"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2147),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2148),
                            Name = "Alterar Reserva",
                            Type = "Reserve",
                            UpdatedBy = 0,
                            Value = "Edit"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2151),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2152),
                            Name = "Desativar Reserva",
                            Type = "Reserve",
                            UpdatedBy = 0,
                            Value = "Disable"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2154),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2155),
                            Name = "Reativar Reserva",
                            Type = "Reserve",
                            UpdatedBy = 0,
                            Value = "Reactive"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2157),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2158),
                            Name = "Listar Itens",
                            Type = "Item",
                            UpdatedBy = 0,
                            Value = "All"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2160),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2161),
                            Name = "Visualizar Item",
                            Type = "Item",
                            UpdatedBy = 0,
                            Value = "Get"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2163),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2165),
                            Name = "Adicionar Item",
                            Type = "Item",
                            UpdatedBy = 0,
                            Value = "Add"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2167),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2168),
                            Name = "Alterar Item",
                            Type = "Item",
                            UpdatedBy = 0,
                            Value = "Edit"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2170),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2171),
                            Name = "Desativar Item",
                            Type = "Item",
                            UpdatedBy = 0,
                            Value = "Disable"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2173),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2174),
                            Name = "Reativar Item",
                            Type = "Item",
                            UpdatedBy = 0,
                            Value = "Reactive"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2176),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2177),
                            Name = "Listar Permissões",
                            Type = "Permission",
                            UpdatedBy = 0,
                            Value = "All"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2179),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2180),
                            Name = "Listar Fluxo de Caixa",
                            Type = "CashFlow",
                            UpdatedBy = 0,
                            Value = "All"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2182),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2183),
                            Name = "Visualizar Fluxo de Caixa",
                            Type = "CashFlow",
                            UpdatedBy = 0,
                            Value = "Get"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2185),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2186),
                            Name = "Adicionar Fluxo de Caixa",
                            Type = "CashFlow",
                            UpdatedBy = 0,
                            Value = "Add"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2188),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2190),
                            Name = "Alterar Fluxo de Caixa",
                            Type = "CashFlow",
                            UpdatedBy = 0,
                            Value = "Edit"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2191),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2193),
                            Name = "Desativar Fluxo de Caixa",
                            Type = "CashFlow",
                            UpdatedBy = 0,
                            Value = "Disable"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2256),
                            CreatedBy = 0,
                            DisabledBy = 0,
                            LastUpdatedAt = new DateTime(2020, 10, 24, 22, 51, 40, 871, DateTimeKind.Local).AddTicks(2257),
                            Name = "Reativar Fluxo de Caixa",
                            Type = "CashFlow",
                            UpdatedBy = 0,
                            Value = "Reactive"
                        });
                });

            modelBuilder.Entity("BD.Business.Models.Reserve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DisabledBy")
                        .HasColumnType("int");

                    b.Property<decimal>("Entry")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reserves");
                });

            modelBuilder.Entity("BD.Business.Models.ReserveItem", b =>
                {
                    b.Property<int>("IdReserveItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DisabledBy")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReserveId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("IdReserveItem");

                    b.HasIndex("ItemId");

                    b.HasIndex("ReserveId");

                    b.ToTable("ReserveItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("BD.Business.Models.CashFlow", b =>
                {
                    b.HasOne("BD.Business.Models.Reserve", "Reserve")
                        .WithMany("CashFlows")
                        .HasForeignKey("ReserveId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BD.Business.Models.ReserveItem", b =>
                {
                    b.HasOne("BD.Business.Models.Item", "Item")
                        .WithMany("ReserveItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BD.Business.Models.Reserve", "Reserve")
                        .WithMany("ReserveItem")
                        .HasForeignKey("ReserveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BD.Business.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BD.Business.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BD.Business.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("BD.Business.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BD.Business.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BD.Business.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
